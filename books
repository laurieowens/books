For anyone interested, here is my favorite book on ES6 http://exploringjs.com/es6/ch_core-features.html
[3:12] 
Discovered another great resource for anyone still working on "speaking" javascript intelligently http://speakingjs.com/es5/ch01.html#_syntax
The 2016 4th edition is available for purchase at https://www.amazon.com/exec/obidos/ASIN/0300211651/webstyleguidecom and portions are available for free at https://books.google.com/books?id=S-e7DAAAQBAJ&hl=en
Google Books
Web Style Guide, 4th Edition
A classic reference book on user interface design and graphic design for web sites, updated to reflect a rapidly changing market Consistently praised as the best volume on classic elements of web site design, Web Style Guide has sold many thousands of copies and has been published around the world. This new revised edition confirms Web Style Guide as the go-to authority in a rapidly changing market. As web designers move from building sites from scratch to using content management and aggregation Show more‚Ä¶
@accimeesterlin http://mongoosejs.com/docs/api.html#connection_Connection-dropDatabase
https://github.com/mafintosh/mongojs
GitHub
mafintosh/mongojs
mongojs - Node.js module that implements the offical mongo api
 

[7:49] 
http://mongodb.github.io/node-mongodb-native/
https://www.youtube.com/watch?v=cSUxHv-kH7w&list=PLb0IAmt7-GS3fZ46IGFirdqKTIxlws7e0&index=2
üïπÔ∏è Dustin Sparks - Inst [7:19 PM] 
http://chaijs.com/guide/styles/
chaijs.com
Assertion Styles - Chai
üêô John McSwain - Inst [7:37 PM] 
*Date.now()*
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now
Musa Siddeeq - Inst [11:08 AM] 
This is a classic book about UI design. Great guide for improving your "polish" points on your final project. The 2008 3rd edition is still applicable and available online for free at http://webstyleguide.com/wsg3/index.html
Eric Fry [4:58 PM] 
here's a very interesting interview by Ross Anderson (Professor of Security Engineering - University of Cambridge):
https://www.edge.org/conversation/ross_anderson-the-threat (edited)

Musa Siddeeq - Inst [5:20 PM] 
commented on Stateless, secure, signed cookies recipe with JWT, Express-JWT, Expresss and JS-Cookie
Updates have been made to the recipe and @monica has half the answers! Please reach out and get your updates and check out the commits 
https://github.com/Monica1W/project2/commit/b63b60a9fa52496be1433f2538e76a1e0825731c
https://github.com/Monica1W/project2/commit/c6e63aa860d44a9f4f41432401205cf2b9a7bb9b
https://github.com/Monica1W/project2/commit/c94405641d0ab1c75fa7802ff8f0d5cb6dc67f4b
https://github.com/Monica1W/project2/commit/d9d4860955fc0964b152110d420ddecf69631e39


Musa Siddeeq - Inst [5:25 PM] 
@rimjieun @seayport @c-marshall

Musa Siddeeq - Inst [10:18 PM] 
@seayport `npm install --save cookie-parser express-jwt jsonwebtoken`
Eric Fry [3:52 PM] 
https://auth0.com/blog/brute-forcing-hs256-is-possible-the-importance-of-using-strong-keys-to-sign-jwts/
Auth0 - Blog
Brute Forcing HS256 is Possible: The Importance of Using Strong Keys in Signing JWTs
Cracking a JWT signed with weak keys is possible via brute force attacks. Learn how Auth0 protects against such attacks and alternative J...
 

Welcome to Posts
Tell me more I‚Äôll figure it out
 
Find in post
 
Musa Siddeeq - Inst shared in gt-atl-instructions Unshare from #gt-atl-instructions
Stateless, secure, signed cookies recipe with JWT, Express-JWT, Expresss and JS-Cookie
TL;DR You need cookies and JWT because you have HTML and API routes. This is a recipe for implementing a secure app without sessions and backed by a RESTful API.
TL;DR You need cookies and JWT because you have HTML and API routes. This is a recipe for implementing a secure app without sessions and backed by a RESTful API.
npm install --save cookie-parser express-jwt jsonwebtoken 
npm install --save cookie-parser express-jwt jsonwebtoken 
SCENARIO: YOU HAVE AN APP WITH HTML +  API ROUTES
SCENARIO: YOU HAVE AN APP WITH HTML +  API ROUTES
SERVER-SIDE TASKS
SERVER-SIDE TASKS
GIVEN: A user database
GIVEN: A user database
WHEN: A user authenticates successfully
WHEN: A user authenticates successfully
THEN: create a cookie embeding JWT token
THEN: create a cookie embeding JWT token
THEN: redirect user to protected HTML route
THEN: redirect user to protected HTML route
const jwt = require('jsonwebtoken');
const jwt = require('jsonwebtoken');
const gtGroupSecret = process.env.GT_GROUP_SECRET || 'ImTooLazyToWriteMyOwnSecretEnvValue';
const gtGroupSecret = process.env.GT_GROUP_SECRET || 'ImTooLazyToWriteMyOwnSecretEnvValue';
app.use(cookieParser(gtGroupSecret));
app.use(cookieParser(gtGroupSecret));
app.post('/signin', function(req, res) {
app.post('/signin', function(req, res) {
    // find your user
    // find your user
    // bcrypt.compare password with passwordHash
    // bcrypt.compare password with passwordHash
    // everything checks out fine
    // everything checks out fine
    if (userVerified) {
    if (userVerified) {
        const oneHour = Math.floor(Date.now() / 1000) + (60 * 60);
        const oneHour = Math.floor(Date.now() / 1000) + (60 * 60);
        const payload = {
        const payload = {
            exp: oneHour,
            exp: oneHour,
            user: {
            user: {
                id: userId,
                id: userId,
                name: 'Musa'
                name: 'Musa'
            }
            }
        };
        };
        const jwtAuthToken = jwt.sign(payload, gtGroupSecret);
        const jwtAuthToken = jwt.sign(payload, gtGroupSecret);
        // Create a cookie embedding JWT token
        // Create a cookie embedding JWT token
        res.cookie('jwtAuthToken', jwtAuthToken, { 
        res.cookie('jwtAuthToken', jwtAuthToken, { 
            secure: process.env.NODE_ENV === 'production',
            secure: process.env.NODE_ENV === 'production',
            signed: true
            signed: true
        });
        });
        // redirect user to protected HTML route
        // redirect user to protected HTML route
        res.redirect('/protected/html/userprofile')
        res.redirect('/protected/html/userprofile')
    } else {
    } else {
        res.render('login')
        res.render('login')
    }
    }
});
});
GIVEN: A protected HTML route
GIVEN: A protected HTML route
WHEN: request is received
WHEN: request is received
THEN: verify authorization via cookie using express-jwt getToken
THEN: verify authorization via cookie using express-jwt getToken
THEN: send or render HTML page
THEN: send or render HTML page
const jwtExp = require('express-jwt');
const jwtExp = require('express-jwt');
// verify authorization via cookie using express-jwt
// verify authorization via cookie using express-jwt
app.use('/protected/html', jwtExp({
app.use('/protected/html', jwtExp({
    secret: gtGroupSecret,
    secret: gtGroupSecret,
    getToken: function fromCookie(req) {
    getToken: function fromCookie(req) {
        if (req.signedCookies) {
        if (req.signedCookies) {
            return req.signedCookies.jwtAuthToken;
            return req.signedCookies.jwtAuthToken;
        }
        }
        return null;
        return null;
    }
    }
}));
}));
app.get('/protected/html/userprofile', function(req, res) {
app.get('/protected/html/userprofile', function(req, res) {
// render HTML page
// render HTML page
// req.user contains your payload from jwtAuthToken
// req.user contains your payload from jwtAuthToken
    res.render('userprofile', { user: req.user });
    res.render('userprofile', { user: req.user });
});
});
GIVEN: A protected API route
GIVEN: A protected API route
WHEN: request is received
WHEN: request is received
THEN: verify authorization using express-jwt
THEN: verify authorization using express-jwt
THEN: send JSON data
THEN: send JSON data
const jwtExp = require('express-jwt');
const jwtExp = require('express-jwt');
// verify authorization using express-jwt 
// verify authorization using express-jwt 
app.use('/protected/api', jwtExp({ secret: gtGroupSecret }));
app.use('/protected/api', jwtExp({ secret: gtGroupSecret }));
app.get('/protected/api/data', function(req, res) {
app.get('/protected/api/data', function(req, res) {
// query your database
// query your database
// send json data
// send json data
    res.status(200).json({ data: data });
    res.status(200).json({ data: data });
});
});
NOTE: In all instances that authorization fails verification, you should expect/respond with an error and message and the frontend should provide information to user about failure.
NOTE: In all instances that authorization fails verification, you should expect/respond with an error and message and the frontend should provide information to user about failure.
CLIENT-SIDE TASKS
CLIENT-SIDE TASKS
GIVEN: A user on a protected HTML page
GIVEN: A user on a protected HTML page
WHEN: client sends an $.ajax request
WHEN: client sends an $.ajax request
THEN: client will send authorization header embedding JWT token Authorization: Bearer MYJWT.SIGNEDTOKEN.EXTRACTEDFROMCOOKIE
THEN: client will send authorization header embedding JWT token Authorization: Bearer MYJWT.SIGNEDTOKEN.EXTRACTEDFROMCOOKIE
<script src="/path/to/js.cookie.js"></script>
<script src="/path/to/js.cookie.js"></script>
<script>
<script>
$.ajax({
$.ajax({
    url: "/protected/api/data",
    url: "/protected/api/data",
    type: 'GET',
    type: 'GET',
    // send Authorization header
    // send Authorization header
// embedding jwtAuthToken from cookie
// embedding jwtAuthToken from cookie
    headers: {
    headers: {
        "Authorization": "Bearer " + Cookies.get('jwtAuthToken')
        "Authorization": "Bearer " + Cookies.get('jwtAuthToken')
    }
    }
}).done(function(data) {
}).done(function(data) {
console.log('protected data', data);
console.log('protected data', data);
});
});
</script>
</script>
REQUIRED BACKGROUND:
REQUIRED BACKGROUND:
https://codingbootcamp.hosted.panopto.com/Panopto/Pages/Viewer.aspx?id=b109c410-e542-42c8-8cd2-9489b8a4588a
https://codingbootcamp.hosted.panopto.com/Panopto/Pages/Viewer.aspx?id=b109c410-e542-42c8-8cd2-9489b8a4588a
 
Panopto
Bcrypt, JWT, authentication, authorization
https://github.com/mrmusa/userauth
https://github.com/mrmusa/userauth
 
GitHub
mrmusa/userauth
userauth - Stateless, secure, signed cookies recipe with JWT, Express-JWT, Expresss and JS-Cookie
https://auth0.com/blog/cookies-vs-tokens-definitive-guide/
https://auth0.com/blog/cookies-vs-tokens-definitive-guide/
 
Auth0 - Blog
Cookies vs Tokens: The Definitive Guide
The cookie vs token debate favors token-based authentication. Learn the advantages and get answers to common concerns regarding token aut...
https://github.com/auth0/node-jsonwebtoken
https://github.com/auth0/node-jsonwebtoken
 
GitHub

üêô John McSwain - Inst [6:40 PM] 
Nightmare
https://github.com/segmentio/nightmare
GitHub
segmentio/nightmare
nightmare - A high-level browser automation library.
 
 

[6:45] 
*Unit testing* is a software method by which individual units of source code 
are tested to determine whether they are *fit for use*
https://en.wikipedia.org/wiki/Unit_testing

*Integration testing* is where individual software modules are combined and tested as a group
https://en.wikipedia.org/wiki/Integration_testing

*Functional testing* usually describes what the system is *supposed* to do, from the perspective of a user... aka user acceptance testing
https://en.wikipedia.org/wiki/Functional_testing (edited)

üêô John McSwain - Inst [6:55 PM] 
16.2 Solutions are now available via gt.bootcampcontent.com via `git fetch --all`

üêô John McSwain - Inst [7:03 PM] 
https://devcenter.heroku.com/articles/github-integration
devcenter.heroku.com
GitHub Integration (Heroku GitHub Deploys) | Heroku Dev Center
Heroku integrates with GitHub to make it easy to deploy code living on GitHub to apps running on Heroku
 

[7:03] 
:point_up: for those seeking superintelligence via speed :fast_forward:

Lisa Hagin [7:05 PM] 
heroku deploy
1 reply 21 days ago View thread

Lisa Hagin [7:08 PM] 
file:///C:/Users/lhagi/Desktop/SequelizeHerokuDeploymentProcess.pdf


----- May 13th -----
üêô John McSwain - Inst [9:52 AM] 
Good Evening! Make sure to mark yourself *PRESENT* in bootcampspot.com *AND* pull down the latest code from gt.bootcampcontent.com. Instructions are below :point_down:
```git fetch --all
git checkout upstream/master
git checkout -b 16.3
git push -u origin 16.3```

üêô John McSwain - Inst [10:08 AM] 
https://textexpander.com/
TextExpander
TextExpander ‚Äì Productivity App | Text Expander
TextExpander: Communicate Smarter. Gather, Perfect, Share Your Knowledge. Recall your best words instantly, repeatedly. (121kB)

[10:08] 
https://karma-runner.github.io/1.0/index.html

Musa Siddeeq - Inst [10:34 AM] 
user registration and authentication to your sequelize users table https://github.com/kelektiv/node.bcrypt.js#to-hash-a-password
user authorization token https://github.com/auth0/node-jsonwebtoken#jwtsignpayload-secretorprivatekey-options-callback
GitHub
kelektiv/node.bcrypt.js
node.bcrypt.js - bcrypt for NodeJs
 
 GitHub
auth0/node-jsonwebtoken
node-jsonwebtoken - JsonWebToken implementation for node.js http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html
 

Usman Jamil
[10:36 AM] 
https://github.com/usmanjamil83/BlueSmokeMagicians
GitHub
usmanjamil83/BlueSmokeMagicians
BlueSmokeMagicians - Blue Smoke Magicians
 

Musa Siddeeq - Inst [11:44 AM] 
```// *********************************************************************************
// api-routes.js - this file offers a set of routes for displaying and saving data to the db
// *********************************************************************************

// Dependencies
// =============================================================

// Requiring our models
var db = require("../models");
var bcrypt = require('bcrypt');
var express = require('express');
var apiRouter = express.Router();

var salt = '$2a$10$.zvkhL71NZo804bNdFdBae';

apiRouter.get("/test", function(req, res) {
  res.status(200).json({ 'message': 'Success'})
});



// POST route for creating a new user
apiRouter.post("/user", function(req, res) {
  bcrypt.hash(req.body.password, salt, function(err, hash) {
    // Store hash in your password DB.
    // TODO: update schema to enforce unique usernames
    db.User.create({
      username: req.body.username,
      password: hash
    })
      .then(function(dbPost) {
        res.status(200).json({'status': 'success'});
      });
  });

});

apiRouter.post("/user/signin", function(req, res) {
  db.User.findOne({
    username: req.body.username
  })
    .then(function(user) {
      if (!user) {
        console.log('no user found')
        res.status(400).json({
          'status' : 'Invalid username or password'
        })
      } else {
        bcrypt.compare(req.body.password, user.password, function(err, valid) {
          if (err || !valid) {
            res.status(400).json({
              'status' : 'Invalid username or password'
            })
          } else {
            res.status(200).json({
              id: user.id,
              username: user.username
            });
          }
        });
      }

    });
});

// Routes
// =============================================================
module.exports = apiRouter;```
